# Operadores Lógicos

Los operadores lógicos se utilizan para evaluar combinaciones lógicas. Generalmente, se utilizan en conjunto con los operadores de comparación para evaluar varias condiciones. Su funcionamiento es idéntico a las *Tablas de Verdad* que se suelen aprender en cursos de Matemáticas.

Los operadores disponibles son:

1. ```and```
2. ```or```
3. ```not```


## and

Si ambos operandos son ```True```, entonces, el resultado es ```True```. También se podría interpretar de la siguiente manera: si por lo menos uno de los operandos es ```False```, entonces, el resultado es ```False```. Corresponde al operador de **Conjunción**. Su tabla de verdad es la siguiente.

| a     | b     |  a and b |
|-------|-------|-----------|
| False | False | False     |
| False | True  | False     |
| True  | False | False     |
| True  | True  | True      |

Iniciemos creando variables para representar la calificación de tres películas.

```{python}
the_dark_knight = 9.0
interstellar = 8.7
inception = 8.8
```

Si quisieramos evaluar si ```the_dark_knight``` tiene una puntuación mayor que las otras dos, se podría sugerir realizar la comparación de la siguiente manera lógica.

```{python}
the_dark_knight > interstellar > inception
```

Sin embargo, no obtendríamos el resultado esperado. En este caso, al concatenar el operador de comparación ```>```, Python evalúa que ```the_dark_knight``` sea mayor que ```interstellar```, y luego, que ```interstellar``` sea mayor que ```inception```. Por esta razón obtenemos ```False```.

Por lo tanto, si lo que queremos evaluar realmente es si el valor de ```the_dark_knight``` es mayor a los otros dos, entonces, podríamos utilizar el operador ```and``` de la siguiente manera.

```{python}
the_dark_knight > interstellar and the_dark_knight > inception
```

A continuación, realizaremos las operaciones de la línea anterior de forma independiente para comprender cómo funciona realmente. Primero, se realizan las operaciones comparativas. Observamos que el resultado de cada comparación devuelve un resultado ```True```.

```{python}
the_dark_knight > interstellar
```

```{python}
the_dark_knight > inception
```

Luego, se realiza la operación lógica. En este caso, realizaremos la operación ```and``` directamente con los valores que nos devolvieron las comparaciones anteriores.

```{python}
True and True
```

El resultado coincide con lo mostrado en la tabla de verdad para la conjunción.

::: {.callout-caution}
Nótese que es necesario realizar la comparación contra cada película de forma independiente. Un error bastante común consiste en realizar la operación de la siguiente manera, lo cual produciría un resultado incorrecto o carente de sentido lógico.
:::

```{python}
the_dark_knight > interstellar and inception
```

En la expresión anterior, se inicia realizando la comparación.

```{python}
the_dark_knight > interstellar
```

Pero luego, al evaluar el operador lógico, realmente se está realizando la siguiente expresión.

```{python}
True and inception
```

::: {.callout-note}
Utilizando el operador ```and``` se pueden añadir tantas comparaciones como sea necesario, por ejemplo, si necesitaramos comparar contra más de dos películas. Lo importante es tener presente que el resultado será ```True``` sí y solo sí **todos** los operandos son ```True```.
:::

```{python}
the_prestige = 8.5

(the_dark_knight > interstellar
and the_dark_knight > inception
and the_dark_knight > the_prestige)
```

::: {.callout-note}
Si se requiere separar un código de Python en múltiples líneas, se puede encerrar la expresión completa dentro de paréntesis ```()```.
:::

## or

Si al menos uno de los operandos es ```True```, entonces, el resultado es ```True```. En este caso, el resultado será ```False```únicamente cuando todos los operandos sean ```False```. Su tabla de verdad corresponde al operador de Disyunción.

| a     | b     |  a or b |
|-------|-------|-----------|
| False | False | False     |
| False | True  | True     |
| True  | False | True     |
| True  | True  | True      |

Crearemos la siguiente variables para comprender su funcionamiento. Asumamos que una tienda tiene una promoción especial del 20% de descuento si el cliente realiza el pago con una tarjeta de crédito a 6 o 12 cuotas.

```{python}
numCuotas = 6
```

Entonces, podríamos utilizar el operador ```or``` para evaluar si la cantidad de cuotas seleccionada por el cliente, ```numCuotas```, coincide con el valor 6 o 12.

```{python}
numCuotas == 6 or numCuotas == 12
```

Al evaluar la expresión, obtenemos el resultado de ```True``` debido a que la primera comparación es verdadera. Al igual que la subsección anterior, analicemos cómo es evaluada la expresión anterior en pasos.

Primero, se realizan las operaciones de comparación.
```{python}
numCuotas == 6
```

```{python}
numCuotas == 12
```

Luego, se toman los resultados de cada comparación y se evalúa el operador lógico.

```{python}
True or False
```

El resultado coincide con la tabla de verdad para disyunción.

::: {.callout-note}
Al igual que el operador ```and```, es posible anidar más comparaciones en una misma expresión. Por ejemplo, podríamos ampliar la promoción a 18 y 24 cuotas.
:::

```{python}
(numCuotas == 6
 or numCuotas == 12
 or numCuotas == 18
 or numCuotas == 24)
```

## not

El operador ```not``` invierte el valor lógico del operando. Si el operando es ```True```, entonces, el resultado es ```False```. Y si el operando es ```False```, entonces, el resultado será ```True```. Corresponde a la tabla de la negación.

| a     | not a |
|-------|-------|
| False | True |
| True | False  |

Inicialmente, podría parecer que este operador no tiene ninguna utilidad ya que simplemente invierte el valor de un operando. Sin embargo, en ciertas ocasiones podría resultar conveniente utilizarlo, especialmente, para hacer más clara (y natural) una expresión.

A continuación, supongamos que tenemos las siguientes variables que indican si una persona si se encuentra en línea y si está ocupada.

```{python}
enLinea = True
ocupada = False
```

Para determinar si la persona se encuentra disponible para contactarla, podríamos escribir la siguiente expresión. Si su resultado es ```True```, entonces, contactamos a la persona, si es ```False```, entonces, no.

```{python}
enLinea and not ocupada
```

La línea de código se lee con bastante naturalidad: la contactaré si "está en línea y no está ocupada". Claramente, se ve más legible a que hubiéramos utilizado una línea como la siguiente.

```{python}
enLinea==True and ocupada==False
```

:::: {.callout-tip}
Aunque la expresión ```enLinea==True``` es correcta, nótese que daría el mismo resultado que simplemente escribir el nombre de la variable ya que si su valor fuera ```True```, el resultado sería equivalente a ```True===True```, que daría ```True```. Si el valor de la variable fuera ```False```, entonces, se evalúa ```False==True```, dando como resultado ```False```. En conclusión, se obtendría siempre el mismo valor de la variable original.
:::

## Precedencia

Es bastante común utilizar una combinación de operadores lógicos en una misma expresión. Tomar en consideración que los operadores presentan el siguiente orden de precedencia:

0. ```()```
1. ```not```
2. ```and```
3. ```or```

Por lo tanto, se debe tener especial cuidado al emplear distintos operadores lógicos en una misma línea para obtener el resultado deseado. Se recomienda el uso de paréntesis para indicar las operaciones iniciales, y también, para mejorar la claridad del código.

Finalmente, realicemos un ejemplo en el que evalúemos una expresión más compleja. Iniciaremos definiendo las siguientes variables sobre condiciones climáticas.

```{python}
llueve = False
estado = 'nublado'
temperatura = 20
```

Crearemos una expresión que nos ayudará a decidir si es un momento conveniente para salir a caminar. Iniciemos definiendo cuáles serían las condiciones favorables utilizando lenguaje común: saldré a caminar si no llueve y si el estado del clima es nublado o soleado con una temperatura menor a los 24 grados Celcius.

```{python}
not llueve and estado=='nublado' or estado=='soleado' and temperatura<24
```

La expresión anterior podría funcionar correctamente para algunos casos, sin embargo, si evalúamos el siguiente escenario veremos que el resultado no es el esperado.

```{python}
llueve = True
estado = 'soleado'
temperatura = 18

not llueve and estado=='nublado' or estado=='soleado' and temperatura<24
```

El código nos indica que podemos salir, sin embargo, nos interesa que el programa indique ```False``` cuando haya lluvia. Antes de mostrar una posible solución al problema, veamos cómo evalúa Python la expresión planteada y descubramos por qué no funciona en este caso.

Iniciamos reemplazando cada variable con su valor correspondiente.

```{python}
#| eval: false
not True and 'soleado'=='nublado' or 'soleado'=='soleado' and 18<24
```

Evalúemos los operadores de comparación para obtener los resultados ```bool```.

```{python}
#| eval: false
not True and False or True and True
```

Respetando el orden de precedencia de los operadores lógicos. Iniciamos evaluando el ```not```.

```{python}
#| eval: false
False and False or True and True
```

Continúamos evaluando el operador ```and```.

```{python}
#| eval: false
False or True
```

Finalizamos evaluando el operador ```or````.

```{python}
#| eval: false
True
```

Ahora vemos que el orden de precedencia ha afectado el funcionamiento de nuestro código. En este caso, se sugiere colocar paréntesis ```()``` para indicar el orden en el que nos interesa realizar las operaciones lógicas.

```{python}
not llueve and (estado=='nublado' or (estado=='soleado' and temperatura<24))
```

De esta manera, se ha solucionado el error presentado anteriormente. Además, hemos mejorado la legibilidad de nuestro código significativamente, ahora se puede distingir claramente cuáles son las condiciones que se deben cumplir para salir a caminar.
