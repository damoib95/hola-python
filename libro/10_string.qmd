---
title: String
jupyter: python3
---


Un string es una cadena o secuencia de caracteres (letras, números o símbolos).



## Inicialización

Para crear un string, simplemente colocamos la cadena de caracteres dentro de comillas simples o dobles.

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
saludo = '¡Bienvenido a mi programa! _versión 2.1_'
print(saludo)
```

También podemos utilizar la función **str()** para convertir cualquier tipo de dato a string.

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 52}
usuario = 27
print(type(usuario))
usuario = str(usuario)
print(type(usuario))
```

## Concatenación

Podemos unir dos strings utilizando el símbolo **+**. Asegurarse que ambos valores sean de tipo *str*.

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
message = "Your name is "
name = "Diego"
text = message+name
print(text)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
a = "El precio es de: "
b = 19.99
c = a+str(b)
print(c)
```

## Longitud

Podemos determinar el tamaño del string, es decir, el número de caracteres utilizando la función **len()**.

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
ciudad = "Guatemala"
longitud = len(ciudad)
print(longitud)
```

## Indexación

Podemos acceder a caracteres individuales utilizando el operador de indexación **[ ]** justo después del string.

Dentro de paréntesis, se debe especificar el índice del caracter.

**Importante**: Los índices inician con *0*.

Para acceder al último caracter, se puede colocar el índice *-1*

Por ejemplo, si tenemos un string "python", estos serían los índices de cada caracter.

0 | 1 | 2 | 3 | 4 | 5
--- | --- | --- | --- | --- | ---
p | y | t | h | o | n

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
x = "python 3"
print(x)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
print(x[0])
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
print(x[-1])
```

## Corte (slicing)

Podemos acceder a grupos de caracteres utilizando el operador de indexación y especificando el índice inicial y final separados por dos puntos **[ : ]**.

Obtendremos un string conformado por todos los caracteres del índice de inicio hasta el índica del final (sin incluir el este último).

Si se omite el índice al inicio, se selecciona por defecto el índice 0. Y si se omite el índice del final, se selecciona por defecto el último índice.

Por ejemplo, si tenemos el siguiente string.

0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12
--- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---
D | i | e | g | o |  | M | o | r | a | l | e | s

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
nombreCompleto = "Diego Morales"
print(nombreCompleto)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
nombre = nombreCompleto[:5]
print(nombre)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
apellido = nombreCompleto[6:]
print(apellido)
```

## Métodos

Los string poseen métodos integrados que podemos utilizar. Estos métodos no modifican el string original sino que retornan un nuevo string con la salida.

Documentación de Python: [String Methods](https://docs.python.org/3/library/stdtypes.html#string-methods)


```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
date = "   FECHA: 1 de enero de 1970 "
print(date)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
date = date.strip()
print(date)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
"enero" == "Enero".lower()
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
,print(date.upper())
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
print(date.lower())
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 52}
year = "2020"
print(year)
print(year.isnumeric())
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
print("enero" in date)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
print(date.find("enero"))
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
print(date.find("marzo"))
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
print(date.replace("enero","febrero"))
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 52}
elementos = date.split()
print(elementos)
print(elementos[3])
```

### Ejemplo
Recibe un string con información sobre una dirección de correo electrónico. Se le solicita extraer el correo y luego extraer el usuario del mismo.

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
mensaje = "Correo de: diego.morales@ameritec.edu.gt  "
print(mensaje)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
start = mensaje.find(":")
print(start)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
correo = mensaje[start+1:]
print(correo)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
correo = correo.strip()
print(correo)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
partes = correo.split("@")
print(partes)
```

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
usuario = partes[0]
print(usuario)
```

## Formato de cadenas

En Python 3 podemos utilizar un formato para los string que mezclan caracteres con variables.

Se debe inicializar el string escribiendo  una *f* y especificar dentro de llaves las variables *{ }*.

```{python}
#| colab: {base_uri: 'https://localhost:8080/', height: 35}
estudiante = "Diego"
actividad = 3
nota = 100.0

mensaje = f"Hola {estudiante}, tu nota de la actividad {actividad} es de {nota}"
print(mensaje)
```


